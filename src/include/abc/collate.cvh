/* This header file contains datatypes and function prototypes for
 * collations.
 *
 */
#ifndef _COLLATE_
#define _COLLATE_

/************************** Datatypes: **************************/

/* _gcollator: An invisible shared collation object;
 * $gcollator: A handle to the shared collation object;
 *
 * 
 * A global collation object sematically maintains a queue of collate
 * states.
 *
 */
typedef struct _gcollator * $gcollator;

/* _collator: An invisible local collation handle to a shared
 * _gcollator;
 * $collator: A local handle to a _collator object;
 *
 * A local collation hanlde is an object hold by a process. It is used
 * to access the global collation object through a set of
 * interfaces. Sematically how does the handle access the global
 * collation object is opaque from outside of the library.
 */
typedef struct _collator  * $collator;

/* _gcollate_state: The object represents an element of the queue
 * maintained by a _gcollator.
 *
 * $gcollate_state: A reference to the _gcollate_state;
 *
 */
typedef struct _gcollate_state * $gcollate_state;

/*
 * $collate_state: A handle mainly wraps a $gcollate_state and some
 * other meta information, e.g. place.
 *
 * Semantically, this is the only object for a process to access a
 * collate state. The access is restircted by only using interfaces.
 */
typedef struct _collate_state $collate_state;

/********************* Function prototypes: *********************/
/* Interface for creating a $gcollator: */
$gcollator gcollator_create($scope scope, int nprocs);

/* Interface for creating a $collator: */
$collator   collator_create($gcollator gcollator, $scope scope, int place);

/* Destroy a $gcollator */
$atomic_f void gcollator_destroy($gcollator g);

/* Destroy a $collator */
$atomic_f void collator_destroy($collator c);

/* Take a snapshot on the current state. Returns the collate state
 * which contains the snapshot. This function allows processes commit
 * their snapshots collectively. The final collate state will be the
 * state consists of snapshots from all participant processes, one for
 * each. The collate state is always a valid program state as long as
 * it consists of at least one snapshot.
 *
 *
 * Pre-conditions:
 *   scope must be reachable from the call stack of the calling
 *   process.
 *
 *   all participant processes P must be peers, i.e. for each
 *   procecess p in P, p is spawned by another process p' and p' is
 *   not in P.
 *
 *
 * Post-conditions: 
 *   There is a process set P which represents all processes that
 *   already commit their snapshots to the collate state cp, cp has
 *   size(P) live processes (a live process has non-empty call stack).
 *   For each process p in P, its' snapshot in cp is a process state
 *   whose pid is same as its' place in the collator. cp is always a
 *   valid state for P.
 */
/*@
  @ pure;
  @ depends_on \nothing;
  @ executes_when \true;
  @*/
$system void $collate_snapshot($collate_state cp, int nprocs, $scope scope);

/*
 * Take a snapshot on the current state of the current process. The
 * specification of the snap-shooting action requires that: 
 *
 * 1. For a group of participants, each participant can only
 * snap-shoot once for one entry.
 *
 * 2. The implementation of a snap-shooting action must guarantee
 * that: Let D be the set of all dyscopes referenced from the call
 * stack of the calling process p, and let d be the least common
 * ancestor of D. We call d the "process scope" of p. d had better not
 * be in the current collated state s in c (the one that this snapshot
 * is about to affect), else, ERROR. Now add d and its descendants to
 * s, as well as the chain of ancestors from d up until the first
 * dyscope already in s. Also add the call stack of p to s. In this
 * way s is always a valid state.
 */
$collate_state $collate_arrives($collator c, $scope scope);

/* Collectively free a collate state. The last process will be
 * responsible for dequeue the collate state at the head of the queue.
 * 
 * If there is no arrived collate state by the process, it should
 * report an error.
 */
$collate_state $collate_departs($collator c);

/* Tests if a set of participants defined by a $range have all arrived
 * the specific $collate_entry referenced by cp.
 */
/*@ pure;
  @*/
_Bool $collate_arrived($collate_state cp, $range range);


/* Equivalent to $arrived(cp, r') where r' represents the whole set of
 * participants in the specific $collate_entry referenced by cp. 
 */
/*@ pure;
  @*/
_Bool $collate_complete($collate_state cp);

/* enters the given collate state cs, 
 * returns the reference to the pre-state and 
 * control switches to the collate state cols
 */
/*@ depends_on \nothing;
  @ executes_when \true; 
  @ */
$system $state $enter_collate_state($collate_state cs);

/* exits the current state (which is the collate state), copying the path condition
 * to the real state rs and control goes back to the modified real state rs
 */
/*@ depends_on \nothing;
  @ executes_when \true; 
  @ */
$system void $exit_collate_state($collate_state cs, $state rs);

#endif


