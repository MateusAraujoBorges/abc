/* This header file contains the core definitions of the CIVL-C language,
 * including standard types and function prototypes.
 */

#ifndef _CIVLC_
#define _CIVLC_

#pragma CIVL ACSL 
/* *********************  Standard Constants and Types ********************* */
#define $true 1

#define $false 0

#ifndef NULL
#define NULL ((void*)0)
#endif

#ifndef __UNSIGNED_BOUND
#define __UNSIGNED_BOUND 32
#endif

#define $elaborate(x)  for(int _i = 0; _i < (x); _i++)

typedef unsigned long int size_t;

/* **************************  Basic CIVL-C Types ************************** */ 
/* The CIVL-C process reference type */ 
typedef struct $proc $proc;

/* The CIVL-C scope type, used to represent a scope */
typedef struct $scope $scope;

/* The CIVL-C program state refrence type */
typedef struct $state $state;

/* The CIVL-C dynamic type, used to represent a symbolic type */
typedef struct $dynamic $dynamic;

/* **************************** Misc. Functions **************************** */

/* Wait for another process p to terminate. */
$system void $wait($proc p);

/* Blocks until all processes referred to by the given 
   array terminates. */
$system void $waitall($proc *procs, int numProcs);

/* Terminate the calling process. */
/*@ depends_on \nothing;
  @ executes_when \true;
  @*/
$system void $exit(void);

/* Checks if the given process has terminated.
 * 
 * TODO: the contract should be 
 *       depends_on \proc(p);
 */
/*@ depends_on \nothing;
  @ executes_when \true;
  @*/
$system _Bool $is_terminated($proc p);

/* Nondeterministic choice of integer i, such that 0<=i<n. */
/*@ depends_on \nothing;
  @ executes_when \true;
  @*/
$system int $choose_int(int n);

/*@ depends_on \nothing;
  @ executes_when \true;
  @*/
$system void $assert(_Bool expr, ...);

/*@ depends_on \nothing;
  @ executes_when \true;
  @*/
$system void $assume(_Bool expr);

/* get a unique non-negative integer number for time count */
/*@ depends_on \nothing;
  @ executes_when \true;
  @*/
$system int $next_time_count(void);

/* print the path condition of the current state */
/*@ pure;
  @ depends_on \nothing;
  @ executes_when \true;
  @*/
$system void $pathCondition(void);

/* is the given value concrete? */
/*@ pure;
  @ depends_on \nothing;
  @ executes_when \true;
  @*/
$system $pure _Bool $is_concrete_int(int value);
/* **************************** Memory Functions *************************** */

/* The CIVL-C malloc function, which takes a reference to a scope */
/*@ depends_on \nothing;
  @ executes_when \true;
  @*/
$system void* $malloc($scope s, int size);

/* The CIVL-C de-allocation function, which takes a pointer, just like 
 * the standard "free" */
/*@ depends_on \access(p);
  @ executes_when \true;
  @*/
$system void $free(void *p);

/******/

/* Assigns arbitrary value to the memory location specified by the given pointer.
 */
/*@ depends_on \access(ptr);
  @ executes_when \true;
  @*/
$system void $havoc(void *ptr);

/* Returns the value of real number power operation with the given base and exponent.
 */
/*@ pure;
  @ depends_on \nothing;
  @ executes_when \true;
  @*/
$system double $pow(double base, double exp);

/** returns true iff the given pointer is a dereferable pointer */
/*@ depends_on \nothing;
  @ executes_when \true;
  @*/
$system $state_f _Bool $is_derefable(void*ptr);

/* Returns the reference to a snapshot of the current process from the
   current state  */
/*@ depends_on \nothing; */
/*@ executes_when \true; */
$system $state_f $state $get_state();

/* Returns the reference to the current state  */
/*@ depends_on \nothing; */
/*@ executes_when \true; */
$system $state $get_full_state();

// the types will be updated to $integer later
$system int $remainder(int x, int y);

$system int $quotient(int x, int y);

/* Push an assumption into the partial path condition stack belong to
   the calling process. */
/*@ depends_on \nothing; */
/*@ executes_when \true; */
$system void $assume_push(_Bool pred);

/* Pop an entry out of a partial path condition stack belong to the
   calling process. */
/*@ depends_on \nothing; */
/*@ executes_when \true; */
$system void $assume_pop();

/*********************************************************************
 * As long as a process has a non-empty write set stack, any
 * modification on variables and memroy heap objects will be recorded
 * in the write set.
 *********************************************************************/

/* This is a system function which has the same specification as $when
   but more strict requirements: The given condition can ONLY change
   from false to true (or stay true) in any execution of a program,
   otherwise CIVL will not guarantee the soundness for deadlock-free
   property.
 */
/*@ depends_on \nothing;
  @*/
$system void $unidirectional_when(_Bool condition);

/*@ depends_on \access(value);
  @ executes_when \true;
  @*/
$atomic_f void $output_assign(void * output,const void * value, int size);

#endif
